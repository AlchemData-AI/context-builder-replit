**Core Component: The Hierarchical Knowledge Graph (using Neo4j)**
The context is structured as a hierarchical knowledge graph, which will be implemented using **Neo4j**. This technology is well-suited for managing the complex relationships and hierarchical data required. The graph organizes data context from broad business domains down to granular data points.

The hierarchy is defined as follows:

1. **Agent Persona**: The highest-level node. This represents a logical business grouping or domain, such as "Orders," "Marketing," or "Product Catalog." An analyst defines these personas to encapsulate all the data required to answer questions about that specific domain .
2. **Table Nodes**: Each Agent Persona contains multiple Table nodes, representing the actual database tables relevant to that persona.
3. **Column Nodes**: Each Table node is composed of Column nodes, which hold metadata about the specific columns in that table.
4. **Value Nodes**: For low-cardinality columns (e.g., a "status" column with values like "shipped," "pending," "delivered"), the distinct values themselves become the final leaf nodes in the graph, providing the most granular level of context .

**Multi-Layered Context Ingestion Flow:**
The knowledge graph is built and enriched through a systematic, three-stage process:

1. **Automated System Layer:** This foundational layer programmatically extracts objective metadata directly from the database schema.
    - **Schema & DDL Analysis**: It ingests Data Definition Language (DDL) to map out Table and Column nodes, capturing properties like data types, `is_nullable`, and `is_unique` constraints .
    - **Statistical Analysis**: The system runs sampling queries to determine statistical properties of columns . A key property is **cardinality**, which dictates the creation of Value nodes .
        - **High-Cardinality Columns** (>5,000 unique values) are represented only by their Column node metadata .
        - **Low-Cardinality Columns** (<50 unique values) are expanded to include distinct Value nodes in the graph .
2. **AI-Assisted Layer:** The system uses an LLM as a co-pilot to accelerate the context-building process for the analyst.
    - **Auto-Description**: For columns and tables, the AI generates preliminary descriptions for the analyst to review and refine .
    - **Suggested Joins**: The AI suggests potential relationships (edges) between Table nodes that aren't explicitly defined by foreign keys, which the analyst can then validate .
3. **Human-in-the-Loop (Analyst) Layer**: This is the crucial final layer where an analyst (the "Agent Builder") provides the domain-specific business logic required for 100% accuracy . The questions/validations in this step are expected to be generated by system as well as LLM. LLM goes through a sample of data (for now, 1000 rows - but we need to make this more elaborate). Protoype for this - https://alchemi-insight.lovable.app/builder
    - **Persona Definition**: The analyst defines the top-level Agent Personas and assigns the relevant tables to each.
    - **Annotation and Refinement**: The analyst reviews, edits, and approves all AI-generated descriptions and relationships within the "Column Context Builder" flow .
    - **Ambiguity Resolution**: The analyst resolves ambiguities flagged by the system, such as defining the precise relationship between similarly named columns (`order_id` vs. `main_order_id`) to ensure correct query generation .